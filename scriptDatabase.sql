DROP DATABASE IF EXISTS HUCHAT;
CREATE DATABASE HUCHAT;
USE HUCHAT;

CREATE TABLE ACCOUNT(
    USER_NAME VARCHAR(30) PRIMARY KEY,
    PASSWORD VARCHAR(64)
);

CREATE TABLE USERS(
    USER_NAME VARCHAR(30) NOT NULL,    
    FULL_NAME NVARCHAR(100),
    DOB LONG,
    GENDER BOOLEAN,
    MAIL VARCHAR(50),
    PHONE VARCHAR(11),
    CREATE_AT LONG,
    AVATAR_PATH VARCHAR(200),
    FOREIGN KEY (USER_NAME) REFERENCES ACCOUNT(USER_NAME) ON UPDATE CASCADE 
) ENGINE = INNODB;

CREATE TABLE ROOMS(
    ID INT PRIMARY KEY AUTO_INCREMENT,
    USER_NAME_OWNER VARCHAR(20) NOT NULL,
    -- PASS = # MEAN ROOM DUAL
    PASSWORD VARCHAR(64),
    FOREIGN KEY (USER_NAME_OWNER) REFERENCES ACCOUNT(USER_NAME)  ON UPDATE CASCADE 
)ENGINE = INNODB;

CREATE TABLE ROOM_MEMBER(
    ID INT NOT NULL, 
    USER_NAME_MEMBER VARCHAR(20),
    FOREIGN KEY (ID) REFERENCES ROOMS(ID),
    FOREIGN KEY (USER_NAME_MEMBER) REFERENCES ACCOUNT(USER_NAME)  ON UPDATE CASCADE 
)ENGINE = INNODB;

CREATE TABLE INFO_ROOM(
    ID INT NOT NULL, 
    ROOM_NAME NVARCHAR(50),
    AVATAR_PATH VARCHAR(200),
    FOREIGN KEY (ID) REFERENCES ROOMS(ID)  ON UPDATE CASCADE 
)ENGINE = INNODB;

CREATE TABLE CHAT_ROOMS_HISTORY(
    ID_ROOM INT NOT NULL,
    USER_NAME VARCHAR(30),
    CONTENT NVARCHAR(1000),
    TIME LONG
);

CREATE TABLE LOG(
    EVENT VARCHAR(100),
    CREATE_AT LONG
);

-------------------------------------LOG-------------------------------------------
DELIMITER $$
CREATE PROCEDURE PROC_INSERT_LOG_EVENT (
    IN ACTION VARCHAR(100))
BEGIN
	INSERT INTO LOG VALUES(ACTION, UNIX_TIMESTAMP(now()));
END; $$
DELIMITER ;

-- call PROC_INSERT_LOG_EVENT("aaaaaaaa");

DELIMITER $$
CREATE PROCEDURE PROC_VIEW_ALL_EVENT ()    
BEGIN
    SELECT EVENT AS "Hành động", FROM_UNIXTIME(CREATE_AT, "%d-%m-%Y %H:%i:%s") AS "Thời gian tạo"
    FROM LOG
    ORDER BY CREATE_AT DESC;
END; $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE PROC_VIEW_EVENT_BETWEEN (
    IN TIME_A LONG,
    IN TIME_B LONG
)    
BEGIN
    SELECT EVENT AS "Hành động", FROM_UNIXTIME(CREATE_AT, "%d-%m-%Y %H:%i:%s") AS "Thời gian tạo"
    FROM LOG
    WHERE TIME_A <= CREATE_AT AND CREATE_AT <= TIME_B
    ORDER BY CREATE_AT DESC;
END; $$
DELIMITER ;
-- SELECT FROM_UNIXTIME(UNIX_TIMESTAMP(now()), "%d-%m-%Y %H:%i:%s");
-------------------------------------LOG-------------------------------------------

------------------------------------LOGIN------------------------------------------
DELIMITER $$
CREATE PROCEDURE PROC_LOGIN_EVENT (
    IN USER_NAME VARCHAR(30))
BEGIN
	SET USER_NAME = CONCAT("LOGIN WITH USER NAME ", USER_NAME);
	CALL PROC_INSERT_LOG_EVENT(USER_NAME);
END; $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE PROC_LOGOUT_EVENT (
    IN USER_NAME VARCHAR(30))
BEGIN
	SET USER_NAME = CONCAT("LOGOUT WITH USER NAME ", USER_NAME);
	CALL PROC_INSERT_LOG_EVENT(USER_NAME);
END; $$
DELIMITER ;

------------------------------------LOGIN------------------------------------------

-----------------------------------ACCOUNT-----------------------------------------
DELIMITER $$
CREATE PROCEDURE PROC_INSERT_ACCOUNT (
	IN N_USER_NAME VARCHAR(30),  
	IN PASSWORD VARCHAR(64),
    IN EMAIL VARCHAR(50))
BEGIN
    INSERT INTO ACCOUNT VALUES(N_USER_NAME, PASSWORD);
    INSERT INTO USERS(USER_NAME, MAIL, CREATE_AT) VALUES(N_USER_NAME, EMAIL, UNIX_TIMESTAMP(now()));
END; $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE PROC_CHANGE_PASSWORD_ACCOUNT (
	IN N_USER_NAME VARCHAR(30),  
	IN N_PASSWORD VARCHAR(64))
BEGIN
    UPDATE ACCOUNT 
    SET PASSWORD = N_PASSWORD 
    WHERE ACCOUNT.USER_NAME = N_USER_NAME;
END; $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE PROC_DELETE_ACCOUNT (
	IN N_USER_NAME VARCHAR(30))
BEGIN
    UPDATE ACCOUNT
    SET USER_NAME = CONCAT("#", UNIX_TIMESTAMP(now()), USER_NAME)
    WHERE USER_NAME LIKE N_USER_NAME;
END; $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE PROC_VIEW_DELETED_ACCOUNT()
BEGIN
    SELECT USER_NAME 
    FROM ACCOUNT
    WHERE USER_NAME LIKE "#%";
END; $$
DELIMITER ;
-----------------------------------ACCOUNT-----------------------------------------

---------------------------------INFO_USERS----------------------------------------

DELIMITER $$
CREATE PROCEDURE PROC_UPDATE_INFO_USER (
	IN N_USER_NAME VARCHAR(30),  
    IN N_FULL_NAME NVARCHAR(100),
    IN N_DOB LONG,
    IN N_GENDER BOOLEAN,
    IN N_MAIL VARCHAR(50),
    IN N_PHONE VARCHAR(11),
    IN N_AVATAR_PATH VARCHAR(200))
BEGIN
    UPDATE USERS 
    SET FULL_NAME = N_FULL_NAME,
        DOB = N_DOB,
        GENDER = N_GENDER,
        MAIL = N_MAIL,
        PHONE = N_PHONE,
        CREATE_AT = N_CREATE_AT,
        AVATAR_PATH = N_AVATAR_PATH
    WHERE USER_NAME = N_USER_NAME;
END; $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE PROC_GET_INFO_USER(
    IN N_USER_NAME VARCHAR(30))
BEGIN
    SELECT  *
    FROM USERS
    WHERE USER_NAME = N_USER_NAME;
END; $$
DELIMITER ;

-- -------------------------------INFO_USERS----------------------------------------

-- -------------------------------ROOM----------------------------------------
DELIMITER $$
CREATE PROCEDURE PROC_ROOM_OF_USER(
    IN N_USER_NAME VARCHAR(30))
BEGIN
    SELECT ID 
    FROM ROOM_MEMBER
    WHERE USER_NAME_MEMBER LIKE N_USER_NAME; 
END; $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE PROC_CREATE_ROOM(
    IN N_USER_NAME VARCHAR(30),
    IN N_PASSWORD VARCHAR(64),
    IN N_ROOM_NAME NVARCHAR(50))
BEGIN
    INSERT INTO ROOMS(USER_NAME_OWNER, PASSWORD) VALUES(N_USER_NAME, PASSWORD);
    INSERT INTO INFO_ROOM(ID, ROOM_NAME) VALUES((SELECT ID FROM `ROOMS` ORDER BY id DESC limit 1), N_ROOM_NAME);
    INSERT INTO ROOM_MEMBER(ID, USER_NAME_MEMBER) VALUES((SELECT ID FROM `ROOMS` ORDER BY id DESC limit 1), N_USER_NAME);
END; $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE PROC_CREATE_DUO_CHAT(
    IN N_USER_NAME VARCHAR(30),
    IN N_USER_NAME_2 VARCHAR(20))
BEGIN
    DECLARE CONCAT_USER_NAME VARCHAR(41);
    SET CONCAT_USER_NAME = CONCAT(N_USER_NAME, "#", N_USER_NAME_2);
    INSERT INTO ROOMS(USER_NAME_OWNER, PASSWORD) VALUES(CONCAT_USER_NAME, "#");
END; $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE PROC_CHECK_DUO_CHAT(
    IN N_CONCAT_USER_NAME VARCHAR(41))
BEGIN
    SELECT ID
    FROM ROOMS
    WHERE ROOMS.USER_NAME_OWNER LIKE N_CONCAT_USER_NAME AND PASSWORD = "#";
END; $$
DELIMITER ;

-- -------------------------------ROOM----------------------------------------

-- -------------------------------CHAT----------------------------------------
DELIMITER $$
CREATE PROCEDURE SEND_MESSAGE(
    IN ID_ROOM INT,
    IN N_USER_NAME VARCHAR(30),
    IN N_CONTENT NVARCHAR(1000))
BEGIN
    INSERT INTO CHAT_ROOMS_HISTORY VALUES(ID_ROOM, N_USER_NAME, N_CONTENT, UNIX_TIMESTAMP(now()));
END; $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE GET_CHAT_ROOM_HISTORY(
    IN ID_ROOM INT)
BEGIN
    SELECT * FROM CHAT_ROOMS_HISTORY WHERE ID = ID_ROOM ORDER BY TIME DESC; 
END; $$
DELIMITER ;
-- -------------------------------CHAT----------------------------------------

-- --------------------------------TRIGGER------------------------------------------
DELIMITER $$
CREATE TRIGGER TRIG_CREATE_ACCOUNT AFTER INSERT
    ON ACCOUNT
    FOR EACH ROW
    BEGIN
        CALL PROC_INSERT_LOG_EVENT(CONCAT("CREATE ACCOUNT WITH USER NAME : ", NEW.USER_NAME));
    END$$
 DELIMITER ;

DELIMITER $$
CREATE TRIGGER TRIG_UPDATE_ACCOUNT AFTER UPDATE
    ON ACCOUNT
    FOR EACH ROW
    BEGIN
        IF NEW.USER_NAME LIKE "#%" THEN CALL PROC_INSERT_LOG_EVENT(CONCAT("DELETE ACCOUNT WITH USER NAME : ", NEW.USER_NAME));
        ELSE
            CALL PROC_INSERT_LOG_EVENT(CONCAT("UPDATE ACCOUNT PASSWORD WITH USER NAME : ", NEW.USER_NAME));
		END IF;
    END $$
 DELIMITER ;

-- ---------------------------------TRIGGER----------------------------------------- --
-- CALL PROC_DELETE_ACCOUNT("tttt");
-- CALL PROC_CHANGE_PASSWORD_ACCOUNT ("MON", "YEYEYE");
CALL PROC_INSERT_ACCOUNT ("tttt","tamdaulong207@gmail.com","XXX");
CALL PROC_INSERT_ACCOUNT ("admin","tamdaulong207@yahoo.com","a");
-- CALL PROC_INSERT_ACCOUNT ("test","a");
CALL PROC_UPDATE_INFO_USER("tttt", "Nguyễn Thành Long", 1111111, true, "a@gmail.com", "00000111", "//aaa///");
CALL PROC_CREATE_ROOM("TTTT", "","LoL");
-- SELECT * FROM `group` 
-- System.currentTimeMillis()
DELETE  FROM `ACCOUNT` WHERE PASSWORD = "XXX";

DELIMITER $$

END; $$
DELIMITER ;
